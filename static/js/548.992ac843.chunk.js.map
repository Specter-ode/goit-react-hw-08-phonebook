{"version":3,"file":"static/js/548.992ac843.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/ContactsPage.module.css?0a45","redux/contacts/contacts-selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Section_title__SLHvV\",\"section\":\"Section_section__Z2PLw\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__BnqXB\"};","export const getContacts = store => store.contacts;\nexport const getFilterValue = store => store.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = ({ catchSubmitInfo }) => {\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n  const clearFields = () => {\n    setState({\n      name: '',\n      number: '',\n    });\n  };\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setState(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    catchSubmitInfo({ ...state });\n\n    clearFields();\n  };\n  const { name, number } = state;\n  const isActive = name && number;\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={handleChange}\n          className={s.input}\n        />\n        Name\n      </label>\n      <label className={s.label}>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          className={s.input}\n        />\n        Phone number\n      </label>\n\n      <button type=\"submit\" disabled={!isActive} className={s.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  catchSubmitInfo: PropTypes.func.isRequired,\n};\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"info\":\"ContactList_info__ndqPX\",\"btn\":\"ContactList_btn__6Piat\"};","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, removeContact }) => {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p className={s.info}>\n            {name}: {number}\n          </p>\n          <button className={s.btn} type=\"button\" onClick={() => removeContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  removeContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__label\":\"Filter_filter__label__ttfPR\",\"filter__input\":\"Filter_filter__input__toa89\"};","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nconst Filter = props => {\n  const { valueFromFilter, catchFilterInfo } = props;\n  return (\n    <label className={s.filter__label}>\n      <input\n        type=\"text\"\n        value={valueFromFilter}\n        onChange={catchFilterInfo}\n        className={s.filter__input}\n      ></input>\n      Find contacts by name\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  valueFromFilter: PropTypes.string,\n  catchFilterInfo: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import s from './ContactsPage.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts, removeContact, addContact } from '../../redux/contacts/contacts-operations';\nimport { filterChange } from '../../redux/contacts/contacts-slice';\nimport { getContacts, getFilterValue } from '../../redux/contacts/contacts-selectors';\n\nimport Section from '../../components/Section/Section';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport Spinner from '../../components/Spinner/Spinner';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(getContacts);\n\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onAddContact = newContactData => {\n    dispatch(addContact(newContactData));\n  };\n\n  const onRemoveContact = contactId => {\n    dispatch(removeContact(contactId));\n  };\n\n  const onChangeFilter = e => {\n    dispatch(filterChange(e.target.value));\n  };\n  const { items, loading, error, filter } = contacts;\n\n  const getVisibleContacts = () => {\n    if (filter) {\n      const normalizedFilterValue = filter.toLowerCase().trim();\n      return items.filter(contact => contact.name.toLowerCase().includes(normalizedFilterValue));\n    }\n    return items;\n  };\n  return (\n    <main>\n      <div className={s.container}>\n        <Section title=\"Phonebook\">\n          <ContactForm catchSubmitInfo={onAddContact} />\n        </Section>\n        <Section title=\"Contacts\">\n          {loading && <Spinner />}\n          {items.length > 0 ? (\n            <>\n              <Filter valueFromFilter={filterValue} catchFilterInfo={onChangeFilter} />\n              <ContactList contacts={getVisibleContacts()} removeContact={onRemoveContact} />\n            </>\n          ) : (\n            <p>No contacts in phonebook</p>\n          )}\n          {error && <p>{error.message}</p>}\n        </Section>\n      </div>\n    </main>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["title","children","className","s","getContacts","store","contacts","getFilterValue","filter","catchSubmitInfo","useState","name","number","state","setState","handleChange","e","target","value","prevState","isActive","onSubmit","preventDefault","type","pattern","onChange","required","disabled","removeContact","map","id","onClick","props","valueFromFilter","catchFilterInfo","useSelector","filterValue","dispatch","useDispatch","useEffect","fetchContacts","items","loading","error","Section","newContactData","addContact","Spinner","length","filterChange","normalizedFilterValue","toLowerCase","trim","contact","includes","getVisibleContacts","contactId","message"],"sourceRoot":""}