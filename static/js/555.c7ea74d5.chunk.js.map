{"version":3,"file":"static/js/555.c7ea74d5.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/FormTextField/FormTextField.module.css?ee7a","components/FormTextField/FormTextField.js","webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/ContactsPage.module.css?0a45","redux/contacts/contacts-selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/fields.js","components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/ContactsPage/ContactsPage.js","services/hooks/useForm.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"block\":\"FormTextField_block__MEJDx\",\"label\":\"FormTextField_label__lF6en\",\"input\":\"FormTextField_input__xOyRo\"};","import PropTypes from 'prop-types';\nimport { useMemo } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\n\nimport s from './FormTextField.module.css';\n\nconst FormTextField = ({\n  label,\n  name,\n  value,\n  onChange,\n  required,\n  type,\n  placeholder,\n  title,\n  pattern,\n}) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <div className={s.block}>\n      <input\n        className={s.input}\n        id={id}\n        name={name}\n        value={value}\n        onChange={onChange}\n        required={required}\n        placeholder={placeholder}\n        type={type}\n        title={title}\n        pattern={pattern}\n      />\n      {label && (\n        <label className={s.label} htmlFor={id}>\n          {label}\n        </label>\n      )}\n    </div>\n  );\n};\n\nexport default FormTextField;\n\nFormTextField.defaultProps = {\n  type: 'text',\n  required: false,\n};\n\nFormTextField.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  title: PropTypes.string,\n  pattern: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Section_title__SLHvV\",\"section\":\"Section_section__Z2PLw\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__BnqXB\"};","export const getContacts = store => store.contacts;\nexport const getFilterValue = store => store.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"btn\":\"ContactForm_btn__wll+u\"};","export const fields = {\n  name: {\n    label: 'Name',\n    name: 'name',\n    type: 'text',\n    required: true,\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n    title:\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n  },\n  number: {\n    label: 'Number',\n    name: 'number',\n    type: 'tel',\n    required: true,\n    pattern: '^[0-9]{7,12}$',\n    title: 'Phone number must have only numbers. Length 7-12',\n  },\n};\n","import PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\nimport { fields } from './fields';\nimport useForm from '../../services/hooks/useForm';\nimport FormTextField from 'components/FormTextField/FormTextField';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\nconst ContactForm = ({ onSubmitClick }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    onSubmitClick,\n    initialState,\n  });\n  const { name, number } = state;\n  const isActive = name && number.length > 6;\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <FormTextField value={name} onChange={handleChange} {...fields.name} />\n      <FormTextField\n        value={number}\n        onChange={handleChange}\n        {...fields.number}\n      />\n      <button type=\"submit\" disabled={!isActive} className={s.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmitClick: PropTypes.func.isRequired,\n};\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"info\":\"ContactList_info__ndqPX\",\"btn\":\"ContactList_btn__6Piat\"};","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, removeContact }) => {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p className={s.info}>\n            {name}: {number}\n          </p>\n          <button className={s.btn} type=\"button\" onClick={() => removeContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  removeContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__label\":\"Filter_filter__label__ttfPR\",\"filter__input\":\"Filter_filter__input__toa89\"};","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nconst Filter = props => {\n  const { valueFromFilter, catchFilterInfo } = props;\n  return (\n    <label className={s.filter__label}>\n      <input\n        type=\"text\"\n        value={valueFromFilter}\n        onChange={catchFilterInfo}\n        className={s.filter__input}\n      ></input>\n      Find contacts by name\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  valueFromFilter: PropTypes.string,\n  catchFilterInfo: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import s from './ContactsPage.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  fetchContacts,\n  removeContact,\n  addContact,\n} from '../../redux/contacts/contacts-operations';\nimport { filterChange } from '../../redux/contacts/contacts-slice';\nimport {\n  getContacts,\n  getFilterValue,\n} from '../../redux/contacts/contacts-selectors';\n\nimport Section from '../../components/Section/Section';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport Spinner from '../../components/Spinner/Spinner';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(getContacts);\n\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onAddContact = newContactData => {\n    dispatch(addContact(newContactData));\n  };\n\n  const onRemoveContact = contactId => {\n    dispatch(removeContact(contactId));\n  };\n\n  const onChangeFilter = e => {\n    dispatch(filterChange(e.target.value));\n  };\n  const { items, loading, error, filter } = contacts;\n\n  const getVisibleContacts = () => {\n    const normalizedFilterValue = filter.toLowerCase().trim();\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilterValue)\n    );\n  };\n  return (\n    <main>\n      <div className={s.container}>\n        <Section title=\"Phonebook\">\n          <ContactForm onSubmitClick={onAddContact} />\n        </Section>\n        <Section title=\"Contacts\">\n          {loading && <Spinner />}\n          {items.length > 0 ? (\n            <>\n              <Filter\n                valueFromFilter={filterValue}\n                catchFilterInfo={onChangeFilter}\n              />\n              <ContactList\n                contacts={getVisibleContacts()}\n                removeContact={onRemoveContact}\n              />\n            </>\n          ) : (\n            <p>No contacts in phonebook</p>\n          )}\n          {error && <p>{error.message}</p>}\n        </Section>\n      </div>\n    </main>\n  );\n};\n\nexport default ContactsPage;\n","import { useState } from 'react';\n\nconst useForm = ({ onSubmitClick, initialState, clearFields = true }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = ({ target }) => {\n    const { name, value, type, checked } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n    setState(prevState => ({\n      ...prevState,\n      [name]: newValue,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmitClick({ ...state });\n\n    if (clearFields) {\n      setState({ ...initialState });\n    }\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n"],"names":["FormTextField","label","name","value","onChange","required","type","placeholder","title","pattern","id","useMemo","nanoid","className","s","htmlFor","defaultProps","children","getContacts","store","contacts","getFilterValue","filter","fields","initialState","number","onSubmitClick","useForm","state","handleChange","handleSubmit","isActive","length","onSubmit","disabled","removeContact","map","onClick","props","valueFromFilter","catchFilterInfo","useSelector","filterValue","dispatch","useDispatch","useEffect","fetchContacts","items","loading","error","Section","newContactData","addContact","Spinner","e","filterChange","target","normalizedFilterValue","toLowerCase","trim","contact","includes","getVisibleContacts","contactId","message","clearFields","useState","setState","checked","newValue","prevState","preventDefault"],"sourceRoot":""}